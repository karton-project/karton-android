buildscript {

    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'com.google.firebase.crashlytics'

repositories {
    mavenCentral()
    maven {
        url 'https://maven.fabric.io/public'
    }
    maven{
        url 'https://sdk.uxcam.com/android/'
    }
    google()
}

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.3'
    defaultConfig {
        applicationId "com.alpay.codenotes"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 27
        versionName "2.3.6"
        multiDexEnabled true
        resConfigs "tr"
        vectorDrawables.useSupportLibrary = true
        proguardFiles 'proguard-rules.pro'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dexOptions {
        preDexLibraries = false
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            multiDexKeepFile file('multidex-config.txt')
        }
        debug {
            multiDexKeepFile file('multidex-config.txt')
            splits.abi.enable = false
            splits.density.enable = false
            aaptOptions.cruncherEnabled = false
            ext.alwaysUpdateBuildId = false
        }
    }
    dataBinding {
        enabled = true
    }

    aaptOptions {
        noCompress "tflite"
    }
    packagingOptions {
        exclude 'META-INF/proguard/androidx-annotations.pro'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation 'com.uxcam:uxcam:3.2.1@aar'
    implementation 'me.xdrop:fuzzywuzzy:1.3.1'
    implementation 'com.google.firebase:firebase-analytics:18.0.0'
    implementation 'com.google.firebase:firebase-crashlytics:17.3.0'
    implementation 'com.squareup:seismic:1.0.2'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'pub.devrel:easypermissions:3.0.0'
    implementation 'com.airbnb.android:lottie:3.1.0'
    implementation 'com.github.duanhong169:colorpicker:1.1.5'
    implementation 'com.github.bumptech.glide:glide:4.9.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.9.0'
    implementation 'com.google.firebase:firebase-auth:20.0.1'
    implementation 'com.google.firebase:firebase-ml-vision:24.0.1'
    implementation 'com.google.firebase:firebase-core:16.0.9'
    implementation 'com.google.firebase:firebase-ml-vision-object-detection-model:19.0.3'
    implementation 'com.firebaseui:firebase-ui-auth:6.4.0'
    implementation 'com.google.firebase:firebase-analytics:17.0.0'
    implementation 'com.jakewharton:butterknife:10.1.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.1.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0-alpha1'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation "androidx.appcompat:appcompat:1.1.0-rc01"
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.0.0-rc01'
    implementation 'org.tensorflow:tensorflow-lite:0.0.0-nightly'
    implementation 'org.tensorflow:tensorflow-lite-gpu:0.0.0-nightly'
    // If you want to use custom Keras models from TFLiteTransferConverter
    // Python API, uncomment the following Flex AAR dependency.
    // implementation 'org.tensorflow:tensorflow-lite-select-tf-ops:0.0.0-nightly'

    // https://developer.android.com/jetpack/androidx/releases/camera
    def camerax_version = "1.0.0-alpha04"
    implementation "androidx.camera:camera-core:$camerax_version"
    implementation "androidx.camera:camera-camera2:$camerax_version"

    // https://developer.android.com/jetpack/androidx/releases/lifecycle
    def lifecycle_version = '2.1.0-rc01'
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

}

// The code below downloads a transfer learning model used in the example app automatically.
def modelUrl = 'https://storage.googleapis.com/download.tensorflow.org/models/tflite/transfer_learning_mobilenet_v2_100_224x224_quant_softmax_4_sgd.zip'
def modelArchivePath = "${buildDir}/model.zip"
def modelTargetLocation = 'src/main/assets/model'

task downloadModel(type: DefaultTask) {
    doFirst {
        println "Downloading and unpacking the model..."
        mkdir project.buildDir
    }

    doLast {
        ant.mkdir(dir: modelTargetLocation)
        // If you want to use your own models rather than pre-built models,
        // comment out the following three lines.
        ant.get(src: modelUrl, dest: modelArchivePath)
        ant.unzip(src: modelArchivePath, dest: modelTargetLocation)
        ant.delete(file: modelArchivePath)
    }
}

preBuild.dependsOn downloadModel

apply plugin: 'com.google.gms.google-services'